{
  "version": 3,
  "file": "server.js",
  "sourceRoot": "..",
  "sources": [
    "src/server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Add required packages\nfs     = require 'fs'\nurl    = require 'url'\npath   = require 'path'\n\n# Add http servers\nhttp   = require 'http'\nhttps  = require 'https'\nquerystring = require 'querystring'\n\n# Start a simple HTTP server based on http(s) libs\nmodule.exports = class SimpleServer\n    constructor: ({share, ssl_ca, ssl_cert, ssl_key}) ->\n        # If websocket and server must be secured\n        # with certificates\n        @share = if share then String(share) else null\n        @secure = false\n        if not fs.existsSync @share\n            throw \"Directory #{@share} does not exists\"\n\n        if ssl_key? or ssl_cert? or ssl_ca?\n            try\n                @sec_profile = {\n                    key: fs.readFileSync(ssl_key),\n                    cert: fs.readFileSync(ssl_cert),\n                    ca: fs.readFileSync(ssl_ca)\n                }\n                @secure = true\n            catch err\n                throw \"Unable to load certificate profile: #{err}\"\n\n        if @secure\n            try\n                @app = https.createServer @sec_profile, @_http_handler\n            catch err\n                throw \"Unable to create secured HTTPS server: #{err}\"\n        else\n            try\n                @app = http.createServer @_http_handler\n            catch err\n                throw \"Unable to create HTTP server: #{err}\"\n\n    # Allow your small server to share some stuff\n    _http_handler: (req, res) =>\n        # If nothing is shared\n        if not @share\n            res.writeHead 200\n            res.end 'Nothing shared'\n            return\n        \n        # If param is set\n        params = url.parse(req.url).query\n        \n        # Avoid blank filename\n        uri = url.parse(req.url).pathname\n        filename = path.join(@share, uri)\n\n        # Sanitize request\n        if '..' in uri.split('/')\n            res.writeHead 400\n            res.end \"Bad Request\\n\"\n            return\n        \n        @method = req.method\n        @_parse_request filename, params, res\n    \n    _parse_request: (filename, params, res) ->\n        # Hard defined mime-type based on extension\n        contentTypesByExtension = {\n            '.html': \"text/html; charset=utf-8\"\n            '.css' : \"text/css; charset=utf-8\"\n            '.js'  : \"application/javascript; charset=utf-8\"\n            '.avi' : \"video/x-msvideo\"\n            '.exe' : \"application/octet-stream\"\n            '.gif' : \"image/gif\"\n            '.htm' : \"text/html; charset=utf-8\"\n            '.ico' : \"image/x-icon\"\n            '.png' : \"image/png\"\n            '.jpeg' : \"image/jpeg\"\n            '.jpg' : \"image/jpeg\"\n            '.mp3' : \"audio/mpeg\"\n            '.mpeg' : \"video/mpeg\"\n            '.pdf' : \"application/pdf\"\n            '.sh' : \"application/x-sh\"\n            '.snd' : \"audio/basic\"\n            '.src' : \"application/x-wais-source\"\n            '.svg' : \"image/svg+xml\"\n            '.tar' : \"application/x-tar\"\n            '.tgz' : \"application/x-compressed\"\n            '.txt' : \"text/plain; charset=utf-8\"\n            '.zip' : \"application/zip\"\n            '.woff' : \"application/font-woff\"\n            '.woff2' : \"application/font-woff2\"\n        }\n\n        # Set default headers\n        headers = {\n            \"Server\": \"IOServer\"\n            \"Content-Type\": \"text/plain; charset=utf-8\"\n            \"X-Content-Type-Options\": \"nosniff\"\n        }\n\n        # Check file existence\n        if not fs.existsSync filename\n            res.writeHead 404, headers\n            res.write \"404 Not Found\\n\"\n            res.end()\n            return\n            \n        # If file is directory search for index.html/php\n        if fs.statSync(filename).isDirectory()\n            # Remove end slash if necessary\n            if filename[-1] is '/'\n                filename = filename.slice(0, -1)\n            filename = \"#{filename}/index.html\"\n        \n        # Prevent directory listing\n        if not fs.existsSync filename\n            res.writeHead 403, headers\n            res.write \"403 Forbidden\\n\"\n            res.end()\n            return\n        \n        try\n            # Get filename content\n            content = fs.readFileSync filename, 'binary'\n        catch err\n            res.writeHead 500, headers\n            res.write \"#{err}\\n\"\n            res.end()\n            return\n            \n        contentType = contentTypesByExtension[path.extname(filename)]\n        \n        if contentType\n            headers[\"Content-Type\"] = contentType\n        \n        res.writeHead 200, headers\n        res.write content, 'binary'\n        res.end()\n\n        return"
  ]
}